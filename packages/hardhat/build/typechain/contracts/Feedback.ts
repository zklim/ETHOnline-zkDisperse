/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FeedbackInterface extends utils.Interface {
  functions: {
    "groupId()": FunctionFragment;
    "joinGroup(uint256)": FunctionFragment;
    "semaphore()": FunctionFragment;
    "sendFeedback(uint256,uint256,uint256,uint256[8])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "groupId"
      | "joinGroup"
      | "semaphore"
      | "sendFeedback"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "groupId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinGroup",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "semaphore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendFeedback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "groupId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGroup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "semaphore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendFeedback",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Feedback extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeedbackInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    groupId(overrides?: CallOverrides): Promise<[BigNumber]>;

    joinGroup(
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    semaphore(overrides?: CallOverrides): Promise<[string]>;

    sendFeedback(
      feedback: PromiseOrValue<BigNumberish>,
      merkleTreeRoot: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  groupId(overrides?: CallOverrides): Promise<BigNumber>;

  joinGroup(
    identityCommitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  semaphore(overrides?: CallOverrides): Promise<string>;

  sendFeedback(
    feedback: PromiseOrValue<BigNumberish>,
    merkleTreeRoot: PromiseOrValue<BigNumberish>,
    nullifierHash: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    groupId(overrides?: CallOverrides): Promise<BigNumber>;

    joinGroup(
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    semaphore(overrides?: CallOverrides): Promise<string>;

    sendFeedback(
      feedback: PromiseOrValue<BigNumberish>,
      merkleTreeRoot: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    groupId(overrides?: CallOverrides): Promise<BigNumber>;

    joinGroup(
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    semaphore(overrides?: CallOverrides): Promise<BigNumber>;

    sendFeedback(
      feedback: PromiseOrValue<BigNumberish>,
      merkleTreeRoot: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    groupId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinGroup(
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    semaphore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendFeedback(
      feedback: PromiseOrValue<BigNumberish>,
      merkleTreeRoot: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
